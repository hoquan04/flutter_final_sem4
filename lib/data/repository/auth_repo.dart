import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_final_sem4/data/service/api_constants.dart';
import 'package:flutter_final_sem4/data/model/user.dart';

class AuthRepository {
  final String baseUrl = "${ApiConstants.baseUrl}/auth";

  /// LOGIN: tr·∫£ v·ªÅ User n·∫øu th√†nh c√¥ng, null n·∫øu th·∫•t b·∫°i
  Future<User?> login(String email, String password) async {
    try {
      final url = Uri.parse('$baseUrl/login');
      final body = jsonEncode({"email": email.trim(), "password": password.trim()});

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json", "accept": "application/json"},
        body: body,
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);

        // API c·ªßa b·∫°n tr·∫£ 200 c·∫£ khi login th·∫•t b·∫°i => ph·∫£i ki·ªÉm tra token/user c√≥ t·ªìn t·∫°i
        if (data != null && data['token'] != null && data['user'] != null) {
          final token = data['token'] as String;
          final userJson = data['user'] as Map<String, dynamic>;

          // L∆∞u token + 1 v√†i th√¥ng tin user ƒë·ªÉ d√πng ·ªü Profile/kh·ªüi ch·∫°y
          final prefs = await SharedPreferences.getInstance();
          await prefs.setString("auth_token", token);
          await prefs.setString("fullName", userJson['fullName'] ?? '');
          await prefs.setString("email", userJson['email'] ?? '');


          await prefs.setInt("userId", userJson['userId'] ?? 0); // gi·ªØ nguy√™n
          await prefs.setString("role", userJson['role']?.toString() ?? 'Customer'); // ‚úÖ ƒë·ªïi sang String



          return User.fromJson(userJson);
        } else {
          // Login th·∫•t b·∫°i (API tr·∫£ message) ho·∫∑c format kh√°c
          print("AuthRepository.login -> failed: ${data['message'] ?? response.body}");
          return null;
        }
      } else {
        print("AuthRepository.login -> HTTP ${response.statusCode}: ${response.body}");
        return null;
      }
    } catch (e) {
      print("AuthRepository.login error: $e");
      return null;
    }
    

  }

  /// REGISTER: tr·∫£ v·ªÅ true n·∫øu th√†nh c√¥ng, false n·∫øu th·∫•t b·∫°i
  Future<bool> register({
    required String firstName,
    required String lastName,
    required String email,
    required String phone,
    required String address,
    required String password,
    required String confirmPassword,
  }) async {
    try {
      final url = Uri.parse('$baseUrl/register');
      final body = jsonEncode({
        "firstName": firstName.trim(),
        "lastName": lastName.trim(),
        "email": email.trim(),
        "phone": phone.trim(),
        "address": address.trim(),
        "role": "Customer",
        "createdAt": DateTime.now().toIso8601String(),
        "password": password.trim(),
        "confirmPassword": confirmPassword.trim(),
      });

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json", "accept": "application/json"},
        body: body,
      );

      print("üëâ Register response: ${response.statusCode} | ${response.body}");

      if (response.statusCode == 200 || response.statusCode == 201) {
        return true;
      } else {
        // N·∫øu server tr·∫£ l·ªói validation (400), log ƒë·ªÉ debug
        final data = jsonDecode(response.body);
        print("AuthRepository.register -> failed: $data");
        return false;
      }
    } catch (e) {
      print("AuthRepository.register error: $e");
      return false;
    }
  }

  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove("auth_token");
    await prefs.remove("fullName");
    await prefs.remove("email");

    await prefs.remove("userId"); 

    // n·∫øu c·∫ßn x√≥a nhi·ªÅu key th√¨ x√≥a ·ªü ƒë√¢y
  }
}
